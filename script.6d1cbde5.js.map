{"version":3,"sources":["script.js"],"names":["interval","canvas","document","getElementById","ctx","getContext","score","lives","ballRadius","x","width","y","height","dx","dy","paddleHeight","paddleWidth","paddleX","paddleY","drawBall","radius","beginPath","arc","Math","PI","fillStyle","fill","closePath","drawPaddle","rect","brickRowCount","brickColumnCount","brickWidth","brickHeight","brickPadding","brickOffsetTop","brickOffsetLeft","bricks","r","c","status","drawBricks","brickX","brickY","rectangleCircleCollision","xc","yc","x1","y1","x2","y2","xn","diffX","max","min","diffY","drawScore","font","fillText","collisionDetection","b","mouseMoveHandler","e","relativeX","clientX","offsetLeft","drawLives","draw","clearRect","alert","location","reload","rightPressed","leftPressed","requestAnimationFrame","keyDownHandler","event","key","keyUpHandler","addEventListener"],"mappings":"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","file":"script.6d1cbde5.js","sourceRoot":"..","sourcesContent":["let canvas = document.getElementById('tutorial');\n\nlet ctx = canvas.getContext('2d');\n\nlet interval;\n\nlet score = 0;\nlet lives = 3;\n\nconst ballRadius = 10;\n\nlet x = canvas.width / 2;\nlet y = canvas.height - 30;\n\nlet dx = 5;\nlet dy = -5;\n\nlet paddleHeight = 10;\nlet paddleWidth = 75;\nlet paddleX = (canvas.width - paddleWidth) / 2;\nlet paddleY = canvas.height - paddleHeight;\n\n\nfunction drawBall(x, y, radius) {\n\n  ctx.beginPath();\n  ctx.arc(x, y, radius, 0, Math.PI * 2);\n  ctx.fillStyle = \"#0095DD\";\n  ctx.fill();\n  ctx.closePath();\n}\n\nfunction drawPaddle() {\n  ctx.beginPath();\n  ctx.rect(paddleX, paddleY, paddleWidth, paddleHeight);\n  ctx.fillStyle = \"#0095DD\";\n  ctx.fill();\n  ctx.closePath();\n}\n\nlet brickRowCount = 3;\nlet brickColumnCount = 5;\nlet brickWidth = 75;\nlet brickHeight = 20;\nlet brickPadding = 10;\nlet brickOffsetTop = 30;\nlet brickOffsetLeft = 30;\n\nlet bricks = [];\nfor (let r = 0; r < brickRowCount; r++) {\n  bricks[r] = [];\n  for (let c = 0; c < brickColumnCount; c++) {\n    bricks[r][c] = { x: 0, y: 0, status: true };\n  }\n}\n\nfunction drawBricks() {\n\n  for (r = 0; r < brickRowCount; r++)\n    for (c = 0; c < brickColumnCount; c++)\n      if (bricks[r][c].status) {\n        let brickX = c * (brickWidth + brickPadding) + brickOffsetLeft;\n        let brickY = r * (brickHeight + brickPadding) + brickOffsetTop;\n        bricks[r][c].x = brickX;\n        bricks[r][c].y = brickY;\n        ctx.beginPath();\n        ctx.rect(brickX, brickY, brickWidth, brickHeight);\n        ctx.fillStyle = \"#0095DD\";\n        ctx.fill();\n        ctx.closePath();\n      }\n\n}\n\nfunction rectangleCircleCollision(r, xc, yc, x1, y1, x2, y2) {\n\n  //the calculation is based on the fact that the value of y is positive going downward from 0,0 unlike normal graphs where it gets negative \n\n  let xn = Math.max(x1, Math.min(xc, x2)); //closest x to circle's centre x on rectangle\n  let yn = Math.max(y1, Math.min(yc, y2)); //closest y to circles' centre y on rectangle\n\n  let diffX = xn - xc;\n  let diffY = yn - yc;\n\n  return (diffX * diffX + diffY * diffY) <= r * r;\n}\n\nfunction drawScore() {\n  ctx.beginPath();\n  ctx.font = \"16px Arial\";\n  ctx.fillStyle = \"#0095DD\";\n  ctx.fillText(\"Score: \" + score, 8, 20);\n  // ctx.closePath();\n}\n\nfunction collisionDetection() {\n  for (let r = 0; r < brickRowCount; r++)\n    for (let c = 0; c < brickColumnCount; c++)\n      if (bricks[r][c].status) {\n        let b = bricks[r][c];\n        if (rectangleCircleCollision(ballRadius, x, y, b.x, b.y, b.x + brickWidth, b.y + brickHeight)) {\n          dy = -dy;\n          b.status = false;\n          score++;\n        }\n      }\n}\n\nfunction mouseMoveHandler(e) {\n  let relativeX = e.clientX - canvas.offsetLeft;\n  if (relativeX > 0 && relativeX < canvas.width) {\n    paddleX = relativeX - paddleWidth / 2;\n  }\n}\n\nfunction drawLives() {\n  ctx.font = \"16px Arial\";\n  ctx.fillStyle = \"#0095DD\";\n  ctx.fillText(\"Lives: \" + lives, canvas.width - 65, 20);\n}\n\nfunction draw() {\n  ctx.clearRect(0, 0, canvas.width, canvas.height);\n\n  drawBricks();\n  drawBall(x, y, ballRadius);\n  drawPaddle();\n  drawScore();\n  drawLives();\n  if (score === brickRowCount * brickColumnCount) {  \n    alert(\"You Win!\");\n    score = 0;\n    document.location.reload();\n  }\n  collisionDetection();\n\n  if (x + dx < ballRadius || x + dx > canvas.width - ballRadius) dx = -dx;\n  if (y + dy < ballRadius) {\n    dy = -dy;\n  } else if (y + dy > canvas.height - ballRadius) {\n    if (rectangleCircleCollision(ballRadius, x, y, paddleX, paddleY, paddleX + paddleWidth, paddleY)) { //last param is not paddlY+paddleHeight because we only care about the collision from the top of paddle\n      dy = -dy;\n      if (x < paddleX || x > paddleX + paddleWidth) dx = -dx;\n    } else if (lives > 1) {\n      lives--;\n      x = canvas.width / 2;\n      y = canvas.height - 30;\n      dx = 5;\n      dy = -5;\n      paddleX = (canvas.width - paddleWidth) / 2;\n    } else {\n      alert(\"Game Over!\");\n      lives = 3;\n      document.location.reload();\n    }\n  }\n\n  x += dx;\n  y += dy;\n\n  if (rightPressed) {\n    paddleX += 7;\n    if (paddleX + paddleWidth > canvas.width) {\n      paddleX = canvas.width - paddleWidth;\n    }\n  } else if (leftPressed) {\n    paddleX -= 7;\n    if (paddleX < 0) {\n      paddleX = 0\n    }\n  }\n\n  requestAnimationFrame(draw);\n}\n\nlet rightPressed = false;\nlet leftPressed = false;\n\nfunction keyDownHandler(event) {\n\n  if (event.key === \"ArrowRight\" || event.key === \"Right\") {\n    rightPressed = true;\n  } else if (event.key === \"ArrowLeft\" || event.key === \"Left\") {\n    leftPressed = true;\n  }\n}\n\nfunction keyUpHandler(event) {\n  if (event.key === \"ArrowRight\" || event.key === \"Right\") {\n    rightPressed = false;\n  } else if (event.key === \"ArrowLeft\" || event.key === \"Left\") {\n    leftPressed = false;\n  }\n}\n\ndraw();\n\ndocument.addEventListener(\"keyup\", keyUpHandler);\ndocument.addEventListener(\"keydown\", keyDownHandler);\ndocument.addEventListener(\"mousemove\", mouseMoveHandler);\n\n\n"]}